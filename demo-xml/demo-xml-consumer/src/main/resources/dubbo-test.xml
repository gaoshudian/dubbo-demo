<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

    <!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样  -->
    <dubbo:application name="dubbo_consumer" />

    <!--<dubbo:registry address="multicast://224.5.6.7:1234" />-->
    <dubbo:registry address="zookeeper://47.103.97.241:2181"/>

    <!-- 消费者的公共配置   是一个全局配置标签，-->
    <dubbo:consumer check="false"  client="netty4"/>

    <!-- 泛化调用,服务消费者不需要有服务端的接口，就能完成服务的调用 -->
    <dubbo:reference id="areaManager" interface="gao.soa.dubbointerface.AreaManager" generic="true"/>

    <!-- 异步调用 -->
    <dubbo:reference id="asyncService" interface="gao.soa.dubbointerface.AsyncService">
        <dubbo:method name="asynctoDo" async="true" />
    </dubbo:reference>

    <!-- 事件通知 -->
    <dubbo:reference id="eventServiceImpl" interface="gao.soa.dubbointerface.EventService">
        <dubbo:method name="eventdo" async="false" onreturn="eventnotify.onreturn" onthrow="eventnotify.onthrow"
                      timeout="2000"/>
    </dubbo:reference>

    <!--本地存根 -->
    <dubbo:reference id="stubServiceImpl" interface="gao.soa.dubbointerface.StubService"
                     stub="gao.soa.dubboconsumer.LocalStubProxy"/>

    <!-- 本地伪装 -->
    <dubbo:reference id="mockServiceImpl" interface="gao.soa.dubbointerface.MockService"
                     mock="gao.soa.dubboconsumer.LocalMockService" timeout="10"/>


    <!--1.通过配置文件方式 -->
    <!--<dubbo:reference id="userServiceImpl"  interface="gao.soa.dubbointerface.UserService"/>-->
    <!--2.通过注解方式 -->
    <dubbo:annotation package="gao.soa"/>

</beans>